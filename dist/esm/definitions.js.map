{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface ImageCropperPlugin {\n  crop(options: CropOptions): Promise<CropResult>;\n}\n\nexport interface CropOptions {\n  /**\n   * The path or url of the image to crop\n   * Can be a local file path, content:// uri, or file:// uri\n   */\n  source: string;\n\n  /**\n   * Quality of the resulting image, between 0-100\n   * @default 90\n   */\n  quality?: number;\n\n  /**\n   * Whether to crop the image in a circle\n   * @default false\n   */\n  circle?: boolean;\n\n  /**\n   * Maximum width of the resulting image\n   * @default 300\n   */\n  width?: number;\n\n  /**\n   * Maximum height of the resulting image\n   * @default 300\n   */\n  height?: number;\n\n  /**\n   * Aspect ratio X for crop box (width/height)\n   * e.g., 1 for square\n   * @default 1\n   */\n  aspectRatioX?: number;\n\n  /**\n   * Aspect ratio Y for crop box (height/width)\n   * e.g., 1 for square\n   * @default 1\n   */\n  aspectRatioY?: number;\n\n  /**\n   * Color of the active controls widget\n   * @default \"#9ef500\"\n   */\n  activeControlsWidgetColor?: string;\n}\n\nexport interface CropResult {\n  /**\n   * The path to the cropped image\n   * On Android: content:// or file:// URI\n   * On iOS: file:// URI\n   */\n  path: string;\n  /**\n   * Base64 encoded image data (optional, web only)\n   */\n  base64?: string;\n}\n"]}